import sys
from math import gcd

# BOJ 17087
# 이제는 BFS로 너무 유명한 숨바꼭질 문제라.. 또 BFS인데 어떤 변수를 추가해줬나~ 하면서 접하게 되었다.
# 하지만 고정관념이 깨져버렸고 문제를 풀면서 이건 BFS가 아닌데?라는 생각이 들었다.
# 일단 수빈이가 여러 명의 동생들을 찾아야 하고 현재 기준 +D or -D 움직일 수 있었다.
# 그리고 움직일 수 있는 수직선은 10^9까지로, 꽤나 넓은 범위이기에 굳이 BFS로 풀겠다고 하더라도
# 방문 여부를 체크하는 배열을 담을 수 없는 크기이다.
# 그래서 여기에 이분탐색을 가미하여 풀고자 하였다.
# 하지만 정답인 D의 최댓값을 +1 등차수열로 지정하면 이분탐색이 적용되는 오름차순이 이나게 된다는 것을 발견했고,
# 유심히 관찰해본 결과 간격들끼리의 최대공약수를 구해내면 그것이 답이라는 게 눈에 보였다.
# 여러 개의 숫자들 간의 최대공약수는 2개씩 하되, 연속해서 진행하면 되므로 간단하게 구할 수 있었다.

N, S = map(int, sys.stdin.readline().split())
A = list(map(int, sys.stdin.readline().split()))
answer = abs(A[0]-S)
for i in range(N):
    answer = gcd(answer, abs(A[i]-S))
print(answer)

